[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'lifepillar/vim-solarized8'

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
  \ 'ui' : 'ff',
  \ 'sourceParams' : {
  \   'file_rec' : {
  \     'ignoredDirectories' : ['.git', 'node_modules'],
  \   },
  \   'file_external' : {
  \     'cmd' : ['git', 'ls-files']
  \   },
  \ },
  \ 'sourceOptions' : {
  \   '_' : {
  \     'matchers' : ['matcher_substring'],
  \   },
  \ },
  \ 'kindOptions' : {
  \   'file' : {
  \     'defaultAction' : 'open',
  \   },
  \   'help' : {
  \     'defaultAction' : 'open',
  \   }
  \ },
  \ 'uiParams' : {
  \   'ff' : {
  \     'startFilter' : v:true,
  \     'prompt' : '>',
  \   }
  \ },
\})

augroup my_ddu
  autocmd!
  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
          \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
          \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i
          \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q
          \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
    \ <Esc>:call ddu#ui#ff#do_action('closeFilterWindow')<CR>
    nnoremap <buffer><silent> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('closeFilterWindow')<CR>
    nnoremap <buffer><silent> q
    \ <Esc>:call ddu#ui#ff#do_action('closeFilterWindow')<CR>
    nnoremap <buffer><silent> Q
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

augroup END

command! DDUHelp call ddu#start({'sources':[{'name':'help'}]})
command! DDURg call ddu#start({'sources':[{'name':'rg', 'options':{'volatile':v:true}}]})
command! DDUGitFile call ddu#start({'sources':[{'name':'file_external'}]})
command! DDUFile call ddu#start({'sources':[{'name':'file_rec'}]})
command! DDUDeinDirectory call ddu#start({'sources':[{'name':'file_rec', 'options':{'path':expand("~/.cache/dein/repos/github.com")}}]})
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'shun/ddu-source-rg'
hook_add = '''
let g:loaded_ddu_rg = 1
'''

[[plugins]]
repo = 'matsui54/ddu-source-help'

[[plugins]]
repo = 'lambdalisue/guise.vim'

[[plugins]]
repo='lambdalisue/fern.vim'
hook_add = '''
nnoremap - <cmd>Fern .<CR>
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
augroup my_deol
  autocmd!
  autocmd FileType deol call s:deol_settings()
augroup END

function s:deol_settings()
  setlocal splitbelow
endfunction

let g:deol#prompt_pattern = '.\+<'
nnoremap <silent> <Leader>t <cmd>call deol#start({'command':'fish'})<CR>
'''

[[plugins]]
repo = 'willelz/vim-flat-yank'
hook_add = '''
vnoremap <Leader>y :<C-u>FlatYank +<CR>
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
nmap s <Nop>
xmap s <Nop>

let g:sandwich_no_initex_ftplugin = 1
let g:sandwich_no_julia_ftplugin = 1
let g:sandwich_no_plaintex_ftplugin = 1
let g:sandwich_no_tex_ftplugin = 1
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
hook_add = '''
nnoremap ss <cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
let g:translator_target_lang = 'ja'
nmap <silent> <Leader>w <Plug>TranslateW
vmap <silent> <Leader>w <Plug>TranslateWV
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'

[[plugins]]
repo = 'psliwka/vim-smoothie'
hook_add = '''
let g:smoothie_update_interval = 10
'''

[[plugins]]
repo = 'willelz/pox.nvim'
if = '!has("wsl")'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set noshowmode

let g:lightline = {
  \  'colorscheme' : 'solarized',
  \  'active' : {
  \    'right' : [ ['lineinfo'],
  \                ['percent'],
  \                ['filetype'],
  \                ['skk']]
  \  },
  \  'component_function' : {
  \    'skk' : 'g:SKK_statusline'
  \  }
  \}
function! g:SKK_statusline() abort
    if get(g:, 'loaded_skkeleton') == 0
      return ''
    endif

    let l:mode = skkeleton#mode()

    if l:mode == 'hira'
      return 'あ'
    elseif l:mode == 'kata'
      return 'ア'
    else
      return ''
    endif
endfunction
'''
