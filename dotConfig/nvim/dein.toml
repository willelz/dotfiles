[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'lifepillar/vim-solarized8'

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'zeertzjq/nvim-paste-fix'
if = 'has("wsl")'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
  \ 'ui' : 'ff',
  \ 'sources' : [{'name' : 'file_rec', 'params' : {} }],
  \ 'sourceParams' : {
  \   'file_rec' : {
  \     'ignoredDirectories' : ['.git', 'node_modules'],
  \   }
  \ },
  \ 'sourceOptions' : {
  \   '_' : {
  \     'matchers' : ['matcher_substring'],
  \   },
  \ },
  \ 'kindOptions' : {
  \   'file' : {
  \     'defaultAction' : 'open',
  \   },
  \   'help' : { 'defaultAction' : 'open' }
  \ },
  \ 'uiParams' : {
  \   'ff' : {
  \     'startFilter' : v:true,
  \     'prompt' : '>',
  \     'previewFloating' : v:true,
  \   }
  \ },
\})

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> p
        \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction

command! DDUHelp call ddu#start({'sources':[{'name':'help'}]})
command! DDURg call ddu#start({'sources':[{'name':'rg'}], 'volatile':v:true})
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'shun/ddu-source-rg'
hook_add = '''
let g:loaded_ddu_rg = 1
'''

[[plugins]]
repo = 'matsui54/ddu-source-help'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
  end
end

-- nvim_lsp.tsserver.setup { on_attach = on_attach }
nvim_lsp.denols.setup { on_attach = on_attach }

local runtime_path = vim.split(package.path, ';')
table.insert(runtime_path, "lua/?.lua")
table.insert(runtime_path, "lua/?/init.lua")
nvim_lsp.sumneko_lua.setup {
  on_attach = on_attach,
  cmd = { "lua-language-server" },
  filetypes = { "lua" },
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
        version = 'LuaJIT',
        -- Setup your lua path
        path = runtime_path,
      },
      diagnostics = {
        -- Get the language server to recognize the `vim` global
        globals = {'vim'},
      },
      workspace = {
        -- Make the server aware of Neovim runtime files
        library = vim.api.nvim_get_runtime_file("", true),
      },
      -- Do not send telemetry data containing a randomized but unique identifier
      telemetry = {
        enable = false,
      },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'lambdalisue/guise.vim'

[[plugins]]
repo='lambdalisue/fern.vim'
hook_add = '''
nnoremap - <cmd>Fern .<CR>
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
nnoremap <silent> <Leader>t <cmd>Deol<CR>
'''

[[plugins]]
repo = 'willelz/vim-flat-yank'
hook_add = '''
vnoremap <Leader>y :<C-u>FlatYank +<CR>
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
nmap s <Nop>
xmap s <Nop>

let g:sandwich_no_initex_ftplugin = 1
let g:sandwich_no_julia_ftplugin = 1
let g:sandwich_no_plaintex_ftplugin = 1
let g:sandwich_no_tex_ftplugin = 1
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
hook_add = '''
nnoremap ss <cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
let g:translator_target_lang = 'ja'
nmap <silent> <Leader>w <Plug>TranslateW
vmap <silent> <Leader>w <Plug>TranslateWV
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'psliwka/vim-smoothie'
hook_add = '''
let g:smoothie_update_interval = 10
'''

[[plugins]]
repo = 'willelz/pox.nvim'
if = '!has("wsl")'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set noshowmode

let g:lightline = {
  \  'colorscheme' : 'solarized',
  \  'active' : {
  \    'right' : [ ['lineinfo'],
  \                ['percent'],
  \                ['filetype'],
  \                ['skkst']]
  \  },
  \  'component_function' : {
  \    'skkst' : 'g:Skk_statusline'
  \  }
  \}
function! g:Skk_statusline() abort
    if get(g:, 'loaded_skkeleton') == 0
      return ''
    endif

    let l:mode = skkeleton#mode()

    if l:mode == 'hira'
      return 'あ'
    elseif l:mode == 'kata'
      return 'ア'
    else
      return ''
    endif
endfunction
'''
