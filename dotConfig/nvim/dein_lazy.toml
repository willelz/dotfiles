[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['typescript', 'typescriptreact', 'typescript.tsx', 'lua', 'sh']
lua_source = '''
local lspconfig= require('lspconfig')

lspconfig.denols.setup {}
lspconfig.bashls.setup {}

lspconfig.lua_ls.setup {
  on_init = function(client)
    client.config.settings = vim.tbl_deep_extend('force', client.config.settings, {
      Lua = {
        runtime = {
          -- Tell the language server which version of Lua you're using
          -- (most likely LuaJIT in the case of Neovim)
          version = 'LuaJIT'
        },
        -- Make the server aware of Neovim runtime files
        workspace = {
          checkThirdParty = false,
          library = vim.api.nvim_get_runtime_file("", true)
        }
      }
    })

    client.notify("workspace/didChangeConfiguration", { settings = client.config.settings })
    return true
  end
}

vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<space>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'VimEnter'
lua_source = '''
vim.notify = require("fidget.notification").notify
require('fidget').setup{}
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])
call ddc#custom#patch_global('ui', 'pum')

call ddc#custom#patch_global('sources', ['around', 'buffer', 'skkeleton'])

call ddc#custom#patch_global('sourceOptions', {
  \ '_' : {
  \   'matchers' : ['matcher_head'],
  \   'sorters' : ['sorter_rank'],
  \ },
  \ 'around' : {'mark' : '[A]'},
  \ 'buffer' : {'mark' : '[B]'},
  \ 'cmdline' : {'mark' : '[cmdline]'},
  \ 'cmdline-history' : {'mark' : '[history]', 'sorters': []},
  \ 'necovim' : {'mark' : '[vim]'},
  \ 'skkeleton' : {
  \   'mark' : '[skk]',
  \   'matchers' : ['skkeleton'],
  \   'sorters' : [],
  \   'minAutoCompleteLength' : 2,
  \ },
  \ 'nvimlsp' : {
  \   'mark' : '[lsp]',
  \   'forceCompletionPattern': '\.\w*|:\w*|-\w*',
  \   'dup' : 'force',
  \ },
  \ })

call ddc#custom#patch_global('sourceParams', {
  \ 'buffer' : {'requireSameFiletype' : v:false},
  \ })

call ddc#custom#patch_global('cmdlineSources', {
  \ ':' : ['cmdline', 'cmdline-history', 'around'],
  \ '/' : ['around'],
  \ '?' : ['around'],
  \ })

call ddc#custom#patch_filetype(
  \ ['typescript', 'typescriptreact', 'typescript.tsx'],
  \ 'sources', ['lsp', 'around', 'buffer', 'skkeleton'])

call ddc#custom#patch_filetype(
  \ 'lua',
  \ 'sources', ['lsp', 'around', 'buffer', 'skkeleton', 'necovim'])

call ddc#custom#patch_filetype(
  \ ['vim', 'toml'],
  \ 'sources', ['necovim', 'around', 'buffer', 'skkeleton'])

cnoremap <expr> <Tab>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ ddc#map#manual_complete()

nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction

inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ '<TAB>'
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo='vim-skk/skkeleton'
on_event = ['InsertEnter', 'CursorHold']
hook_source='''
function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'globalDictionaries' : ['~/.skk/SKK-JISYO.L'],
    \ 'userDictionary' : '~/.skk/skkeleton',
    \ 'databasePath' : '~/.skk/skk_deno_kv',
    \ 'sources' : ['deno_kv'],
    \ 'markerHenkan' : '',
    \ 'markerHenkanSelect' : '',
    \ })

 call skkeleton#register_kanatable('rom', {'q': ['']}) 
 call skkeleton#register_keymap('henkan', "q", 'katakana')
endfunction

imap <C-j> <Plug>(skkeleton-enable)
cmap <C-j> <Plug>(skkeleton-enable)

"無名レジスタにセットしてから呼ぶ
imap <Plug>skk_ReKatakana <cmd>call skkeleton#handle('enable',{})<CR><cmd>call skkeleton#handle('handleKey', {'key':[';',getreg()]})<CR>q
nmap qre ce<Plug>skk_ReKatakana

autocmd User skkeleton-initialize-pre call s:skkeleton_init()
'''

[[plugins]]
repo = 'willelz/teastylua.nvim'
on_ft = "lua"
depends = 'nvim-lspconfig'
hook_source = '''
nmap <Space>f <Plug>teastyluaFormat
'''
